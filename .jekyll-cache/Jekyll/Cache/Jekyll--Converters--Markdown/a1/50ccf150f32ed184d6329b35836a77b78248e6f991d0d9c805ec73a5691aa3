I"]<h1 id="引言">引言</h1>

<p>好久没有更新博客了，春节休息了一段时间，然后是一个新业务上线会比之前忙一些。<br />
这 2 天突然想对现在的工作上遇到的一些技术问题进行一个回顾总结。</p>

<h1 id="关于工作上遇到的一些技术问题的回顾总结">关于工作上遇到的一些技术问题的回顾总结</h1>

<p><strong>1. 要在大量机器上快速分发大的软件包</strong><br />
<strong>2. Salt 结合 GitLab 做自动化更新，实现简单的 CI/CD</strong></p>

<p>其实，这些技术问题在克服后，也不像一开始那么难，难点我感觉是在调研实施和维护的过程和判断决策。<br />
首先是要了解痛点和需求，前期要调研（参考业界现有成熟方案）测试好，理解技术方案原理及架构，<br />
然后更重要，同时我感觉更难的一点是如何在现有生产环境实施，因为生产环境和测试环境不同，<br />
很多软件的默认参数我们需要真正深入理解它之后，然后根据实际情况做修改，<br />
这就要求我们必须更加深刻理解所用的技术。
然后还有一点是，一个系统架构部署好后就不是完事了，实际上后期还要把它用起来，用好它，
而不只是实现最开始的需求，这就像互联网开发中的迭代开发一样。</p>

<p><strong>3. 业务上，新游戏对接时，第三方游戏研发公司没有大规模线上运维经验。</strong></p>

<p>这个对接比较耗费时间和精力。这种的情况下需要我们游戏业务的运维从项目开发初期就介入并一直跟进，
评估程序架构的可运维性，引导推进研发改进程序架构，以满足我们的成熟的游戏运维标准及规范，
这是为了以后大规模游戏服务器可以高效运维。
（上面的问题看起来是流程及标准规范的问题。但我们还可以用技术来实现流程化和标准化，减少过多的人为参与）</p>

<p><strong>4. 实施一些项目时，运维标准化没做好，导致项目实施效率很慢，引入了额外的工作量。</strong></p>
:ET