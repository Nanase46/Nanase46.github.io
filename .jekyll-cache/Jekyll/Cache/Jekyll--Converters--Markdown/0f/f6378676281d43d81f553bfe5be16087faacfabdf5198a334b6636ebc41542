I"%P<h1 id="规划">规划</h1>

<ol>
  <li>系统初始化</li>
  <li>功能模块：设置单独的目录(haproxy/nginx/php/mysql/memcache)，做到尽可能的齐全、独立</li>
  <li>业务模块：根据业务类型划分</li>
</ol>

<h1 id="salt-环境及各功能模块状态-sls-配置">Salt 环境及各功能模块状态 SLS 配置</h1>

<p>环境可分为开发、测试（功能测试环境、性能测试环境）、预生产、生产</p>

<h2 id="1-salt-baseprod-环境配置准备">1 Salt base/prod 环境配置准备</h2>

<ul>
  <li>file_roots base: /srv/salt/base</li>
  <li>file_roots prod: /srv/salt/prod</li>
  <li>pillar_roots bash: /srv/pillar/base</li>
  <li>pillar_roots prod: /srv/pillar/prod</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建相关目录</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /srv/salt/base
<span class="nb">mkdir</span> <span class="nt">-p</span> /srv/salt/prod
<span class="nb">mkdir</span> <span class="nt">-p</span> /srv/pillar/base
<span class="nb">mkdir</span> <span class="nt">-p</span> /srv/pillar/prod

<span class="c"># 修改 /etc/salt/master 配置文件 file_roots/pillar_roots 如下：</span>
/etc/salt/master

file_roots:
  base:
    - /srv/salt/base 
  prod:
    - /srv/salt/prod 

pillar_roots:
  base:
    - /srv/pillar/base
  prod:
    - /srv/pillar/prod 

systemctl restart salt-master

</code></pre></div></div>

<h2 id="2-salt-base-基础环境规划及配置">2 Salt base 基础环境规划及配置</h2>

<p>系统初始化在 base 环境下面配置，以下列出系统初始化要配置的部分：</p>

<ul>
  <li>init 目录</li>
  <li>DNS 配置</li>
  <li>history 记录时间</li>
  <li>记录命令操作</li>
  <li>内核参数优化</li>
  <li>安装 YUM 仓库</li>
  <li>安装 zabbix-agent</li>
</ul>

<p><strong>创建 init 目录</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /srv/salt/base
<span class="nb">mkdir </span>init
<span class="nb">cd </span>init
<span class="nb">mkdir </span>files
</code></pre></div></div>

<p><strong>DNS 配置</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim dns.sls
/etc/resolv.conf:
  file.managed:
    - <span class="nb">source</span>: salt://init/files/resolv.conf
    - backup: minion
    - user: root
    - group: root
    - mode: 644

<span class="c"># 将 resolv.conf 放置在 /srv/salt/base/init/files</span>

</code></pre></div></div>

<p><strong>history 记录时间</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim history.sls
/etc/profile:
  file.append:
    - text:
      - <span class="nb">export </span><span class="nv">HISTTIMEFORMAT</span><span class="o">=</span><span class="s2">"%F %T </span><span class="sb">`</span><span class="nb">whoami</span><span class="sb">`</span><span class="s2"> "</span>
</code></pre></div></div>

<p><strong>记录命令操作</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim audit.sls
/etc/bashrc:
  file.append:
    - text:
      - <span class="nb">export </span><span class="nv">PROMPT_COMMAND</span><span class="o">=</span><span class="s1">'{ msg=$(history 1 | { read x y; echo $y; });logger "[euid=$(whoami)]":$(who am i):[`pwd`]"$msg"; }'</span>	  
</code></pre></div></div>

<p><strong>内核参数优化</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim sysctl.sls
net.ipv4.ip_local_port_range:
  sysctl.present:
    - value: 10000 65000
fs.file-max:
  sysctl.present:
    - value: 2000000
net.ipv4.ip_forward:
  sysctl.present:
    - value: 1
vm.swappiness:
  sysctl.present:
    - value: 0
</code></pre></div></div>

<p><strong>安装 YUM 仓库</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>epel.sls
yum_repo_release:
  pkg.installed:
    - sources:
      - epel-release: http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm
</code></pre></div></div>

<p><strong>安装配置 zabbix-agent</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim zabbix-agent.sls
zabbix-agent:
  pkg.installed:
    - name: zabbix-agent
  file.managed:
    - name: /etc/zabbix/zabbix_agentd.conf
    - <span class="nb">source</span>: salt://init/files/zabbix_agentd.conf
    - template: jinja
    - defaults:
      Zabbix_Server: 
      Hostname: 
    - require:
      - pkg: zabbix-agent
  service.running:
    - <span class="nb">enable</span>: True
    - watch:
      - pkg: zabbix-agent
      - file: zabbix-agent

zabbix_agentd.conf.d:
  file.directory:
    - name: /etc/zabbix/zabbix_agentd.d
    - watch_in:
      - service: zabbix-agent
    - require:
      - pkg: zabbix-agent
      - file: zabbix-agent

<span class="c"># 将 zabbix_agentd.conf 放置在 /srv/salt/base/init/files</span>

<span class="c"># 上面的 SLS 中使用 jinja 模板，使用 pillar 设置 Zabbix_Server，使用 grains 设置 Hostname</span>

<span class="c"># 下面详细说明配置 Zabbix_Server Pillar 的过程</span>

<span class="c"># 在 /srv/pillar/base 下创建 zabbix 目录</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /srv/pillar/base/zabbix
<span class="nb">cd</span> /srv/pillar/base/zabbix

<span class="c"># 配置 Zabbix_Server 的 pillar  SLS</span>
vim agent.sls
Zabbix_Server: 192.168.56.11

<span class="c"># 创建 pillar 的 top file</span>
<span class="nb">cd</span> /srv/pillar/base/
vim top.sls
base:
  <span class="s1">'*'</span>:
    - zabbix.agent

<span class="c"># 刷新 pillar</span>
salt <span class="s1">'*'</span> saltutil.refresh_pillar

<span class="c"># 获取 pillar</span>
salt <span class="s1">'*'</span> pillar.items Zabbix_Server
linux-node2.example.com:
    <span class="nt">----------</span>
    Zabbix_Server:
        192.168.56.11
linux-node1.example.com:
    <span class="nt">----------</span>
    Zabbix_Server:
        192.168.56.11

</code></pre></div></div>

<p><strong>配置 init.sls include 以上各个系统初始化模块</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /srv/salt/base/init
vim init.sls
include:
  - init.dns
  - init.history
  - init.audit
  - init.sysctl
  - init.epel
  - init.zabbix-agent
</code></pre></div></div>

<p><strong>base 环境根目录配置 top file</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /srv/salt/base
vim top.sls
base:
  <span class="s1">'*'</span>:
    - init.init
	
	
<span class="c"># /srv/salt/base 最终目录结构如下：</span>
/srv/salt/base/
├── init
│   ├── audit.sls
│   ├── dns.sls
│   ├── epel.sls
│   ├── files
│   │   ├── resolv.conf
│   │   └── zabbix_agentd.conf
│   ├── history.sls
│   ├── init.sls
│   ├── sysctl.sls
│   └── zabbix-agent.sls
└── top.sls
</code></pre></div></div>

<p><strong>测试并执行状态</strong></p>

<blockquote>

  <p>salt ‘<em>node2</em>’ state.highstate test=True<br />
salt ‘<em>node2</em>’ state.highstate</p>
</blockquote>

<h2 id="3-salt-prod-环境规划及配置">3 Salt prod 环境规划及配置</h2>

<p><strong>生产案例架构图</strong><br />
<img src="https://raw.githubusercontent.com/unixhot/saltbook-code/master/saltstack-arch.png" alt="生产案例架构图*" /></p>

<h3 id="31-salt-prod-环境下-modules-常用服务功能模块配置">3.1 Salt prod 环境下 modules 常用服务功能模块配置</h3>

<p>/srv/salt/prod/ 为生产环境 file_roots，在此级目录创建 modules 目录，用于放置各功能模块状态配置<br />
比如 haproxy/nginx/php/mysql/memcached 等</p>

<p><strong>创建相关 modules 目录</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> /srv/salt/prod/modules
<span class="nb">cd</span> /srv/salt/prod/modules
<span class="nb">mkdir </span>pkg
<span class="nb">mkdir </span>haproxy
<span class="nb">mkdir </span>nginx
<span class="nb">mkdir </span>php
<span class="nb">mkdir </span>mysql
<span class="nb">mkdir </span>memcached
</code></pre></div></div>

<p><strong>配置编译安装软件包状态 make.sls</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>pkg
vim pkg.sls
make-pkg:
  pkg.installed:
    - pkgs:
      - gcc
      - gcc-c++
      - glibc
      - make
      - autoconf
      - openssl
      - openssl-devel
      - pcre
      - pcre-devel
</code></pre></div></div>

<p><strong>配置编译安装 haproxy 的 haproxy.sls</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 第一次写 SLS 首先要在本地手动编译安装一次以保证安装过程的正确性</span>

<span class="nb">cd</span> /usr/local/src
wget http://www.haproxy.org/download/1.6/src/haproxy-1.6.3.tar.gz 
<span class="nb">tar </span>zxf haproxy-1.6.3.tar.gz 
<span class="nb">cd </span>haproxy-1.6.3
make <span class="nv">TARGET</span><span class="o">=</span>linux2628 <span class="nv">PREFIX</span><span class="o">=</span>/usr/local/haproxy-1.6.3
make <span class="nb">install </span><span class="nv">PREFIX</span><span class="o">=</span>/usr/local/haproxy-1.6.3
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/haproxy-1.6.3 /usr/local/haproxy

<span class="c"># 然后配置 haproxy.init 需要修改 BIN 目录（因为编译安装时指定了目录），再添加开机启动</span>

<span class="c"># 配置 net.ipv4.ip_nonlocal_bind</span>

<span class="c"># 配置 /etc/haproxy 目录</span>
</code></pre></div></div>

<p>以上配置写成 haproxy.sls(放置在/srv/salt/prod/modules/haproxy)如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">include</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">modules.pkg.make</span>

<span class="na">haproxy-install</span><span class="pi">:</span>
  <span class="s">file.managed</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">/usr/local/src/haproxy-1.6.3.tar.gz</span>
    <span class="pi">-</span> <span class="na">source</span><span class="pi">:</span> <span class="s">salt://modules/haproxy/files/haproxy-1.6.3.tar.gz</span>
    <span class="pi">-</span> <span class="na">mode</span><span class="pi">:</span> <span class="m">755</span>
    <span class="pi">-</span> <span class="na">user</span><span class="pi">:</span> <span class="s">root</span>
    <span class="pi">-</span> <span class="na">group</span><span class="pi">:</span> <span class="s">root</span>
  <span class="s">cmd.run</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cd /usr/local/src &amp;&amp; tar zxf haproxy-1.6.3.tar.gz &amp;&amp; cd haproxy-1.6.3 &amp;&amp; make TARGET=linux2628 PREFIX=/usr/local/haproxy-1.6.3 &amp;&amp; make install PREFIX=/usr/local/haproxy-1.6.3 &amp;&amp; ln -s /usr/local/haproxy-1.6.3 /usr/local/haproxy</span>
    <span class="pi">-</span> <span class="na">unless</span><span class="pi">:</span> <span class="s">test -L /usr/local/haproxy</span>
    <span class="pi">-</span> <span class="na">require</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">pkg</span><span class="pi">:</span> <span class="s">make-pkg</span>
      <span class="pi">-</span> <span class="na">file</span><span class="pi">:</span> <span class="s">haproxy-install</span>

<span class="na">haproxy-init</span><span class="pi">:</span>
  <span class="s">file.managed</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">/etc/init.d/haproxy</span>
    <span class="pi">-</span> <span class="na">source</span><span class="pi">:</span> <span class="s">salt://modules/haproxy/files/haproxy.init</span>
    <span class="pi">-</span> <span class="na">mode</span><span class="pi">:</span> <span class="m">755</span>
    <span class="pi">-</span> <span class="na">user</span><span class="pi">:</span> <span class="s">root</span>
    <span class="pi">-</span> <span class="na">group</span><span class="pi">:</span> <span class="s">root</span>
    <span class="pi">-</span> <span class="na">require_in</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">file</span><span class="pi">:</span> <span class="s">haproxy-install</span>
  <span class="s">cmd.run</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">chkconfig --add haproxy</span>
    <span class="pi">-</span> <span class="na">unless</span><span class="pi">:</span> <span class="s">chkconfig --list | grep haproxy</span>

<span class="s">net.ipv4.ip_nonlocal_bind</span><span class="pi">:</span>
  <span class="s">sysctl.present</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">value</span><span class="pi">:</span> <span class="m">1</span>

<span class="s">/etc/haproxy</span><span class="pi">:</span>
  <span class="s">file.directory</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">user</span><span class="pi">:</span> <span class="s">root</span>
    <span class="pi">-</span> <span class="na">group</span><span class="pi">:</span> <span class="s">root</span>
    <span class="pi">-</span> <span class="na">mode</span><span class="pi">:</span> <span class="m">755</span>
<span class="err">	</span>
<span class="c1"># 将 haproxy-1.6.3.tar.gz haproxy.init 文件放置在 /srv/salt/prod/modules/haproxy/files</span>
<span class="s">mkdir -p /srv/salt/prod/modules/haproxy/files</span>
<span class="s">cd /srv/salt/prod/modules/haproxy/files</span>
<span class="pi">[</span><span class="nv">root@linux-node1 haproxy</span><span class="pi">]</span><span class="c1"># pwd</span>
<span class="s">/srv/salt/prod/modules/haproxy</span>
<span class="pi">[</span><span class="nv">root@linux-node1 haproxy</span><span class="pi">]</span><span class="c1"># tree</span>
<span class="s">.</span>
<span class="s">├── files</span>
<span class="s">│   ├── haproxy-1.6.3.tar.gz</span>
<span class="s">│   └── haproxy.init</span>
<span class="s">└── install.sls</span>


<span class="c1"># 测试 haproxy 安装初始化状态</span>

 
<span class="s">salt '*node2*' state.sls modules.haproxy.install saltenv=prod test=True</span>

</code></pre></div></div>

<h3 id="32-salt-prod-环境下-cluster-业务模块配置">3.2 Salt prod 环境下 cluster 业务模块配置</h3>

<p>/srv/salt/prod/ 为生产环境 file_roots，在此级目录创建 cluster 目录，用于放置业务模块状态配置<br />
比如 haproxy/nginx/php/mysql/memcached 等</p>

<p><strong>创建相关 cluster 目录</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /srv/salt/prod/cluster
<span class="nb">cd</span> /srv/salt/prod/cluster
<span class="nb">mkdir </span>files
</code></pre></div></div>

<p><strong>配置外部集群中 haproxy 服务器状态文件 haproxy-outside.sls</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim haproxy-outside.sls
include:
  - modules.haproxy.install

haproxy-service:
  file.managed:
    - name: /etc/haproxy/haproxy.cfg
    - <span class="nb">source</span>: salt://cluster/files/haproxy-outside.cfg
    - user: root
    - group: root
    - mode: 644
  service.running:
    - name: haproxy
    - <span class="nb">enable</span>: True
    - reload: True
    - require:
      - cmd: haproxy-install
    - watch:
      - file: haproxy-service
</code></pre></div></div>

<p><strong>将 haproxy-outside.cfg 放置在 /srv/salt/prod/cluster/files</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># haproxy-outside.cfg 内容如下：</span>

global
maxconn 100000
<span class="nb">chroot</span> /usr/local/haproxy
uid 99
gid 99
daemon
nbproc 1
pidfile /usr/local/haproxy/logs/haproxy.pid
log 127.0.0.1 local3 info
defaults
option http-keep-alive
maxconn 100000
mode http
<span class="nb">timeout </span>connect 5000ms
<span class="nb">timeout </span>client 50000ms
<span class="nb">timeout </span>server 50000ms
listen stats
mode http
<span class="nb">bind </span>0.0.0.0:9999
stats <span class="nb">enable
</span>stats uri /haproxy-status
stats auth haproxy:saltstack
frontend frontend_www_example_com
<span class="nb">bind </span>192.168.56.21:80
mode http
option httplog
log global
default_backend backend_www_example_com
backend backend_www_example_com
option forwardfor header X-REAL-IP
option httpchk HEAD / HTTP/1.0
balance <span class="nb">source

</span>server web-node1 192.168.56.11:8080 check inter 2000 rise 30 fall 15
server web-node2 192.168.56.12:8080 check inter 2000 rise 30 fall 15	 
</code></pre></div></div>

<p><strong>测试外部集群中 haproxy 服务器对外提供服务器的状态</strong></p>

<blockquote>

  <p>salt ‘<em>node2</em>’ state.sls cluster.haproxy-outside saltenv=prod</p>
</blockquote>

<h3 id="33-salt-prod-环境下-modules-常用服务模块和-外部-web-业务模块配置">3.3 Salt prod 环境下 modules 常用服务模块和 外部 Web 业务模块配置</h3>

<p>以上状态模块配置较多，以下为对应的文件和目录结构：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@linux-node1 salt]# tree prod
prod
├── bbs
│   ├── files
│   │   ├── nginx-bbs.conf
│   │   └── php.ini-production
│   ├── memcached.sls
│   └── web.sls
├── cluster
│   ├── files
│   │   ├── haproxy-outside.cfg
│   │   └── haproxy-outside-keepalived.conf
│   ├── haproxy-outside-keepalived.sls
│   └── haproxy-outside.sls
└── modules
    ├── haproxy
    │   ├── files
    │   │   ├── haproxy-1.6.3.tar.gz
    │   │   └── haproxy.init
    │   └── install.sls
    ├── keepalived
    │   ├── files
    │   │   ├── keepalived-1.2.17.tar.gz
    │   │   ├── keepalived.init
    │   │   └── keepalived.sysconfig
    │   └── install.sls
    ├── libevent
    │   ├── files
    │   │   └── libevent-2.0.22-stable.tar.gz
    │   └── install.sls
    ├── memcached
    │   ├── files
    │   │   └── memcached-1.4.24.tar.gz
    │   └── install.sls
    ├── nginx
    │   ├── files
    │   │   ├── nginx-1.9.1.tar.gz
    │   │   ├── nginx.conf
    │   │   └── nginx-init
    │   ├── install.sls
    │   └── service.sls
    ├── pcre
    │   ├── files
    │   │   └── pcre-8.37.tar.gz
    │   └── install.sls
    ├── php
    │   ├── files
    │   │   ├── init.d.php-fpm
    │   │   ├── memcache-2.2.7.tgz
    │   │   ├── php-5.6.9.tar.gz
    │   │   ├── php-fpm.conf.default
    │   │   ├── php.ini-production
    │   │   └── redis-2.2.7.tgz
    │   ├── install.sls
    │   ├── php-memcache.sls
    │   └── php-redis.sls
    ├── pkg
    │   └── make.sls
    └── user
        └── www.sls

</code></pre></div></div>

<p>将这上面的 base 和 prod 环境打包上传到 GitHub 上。</p>

:ET