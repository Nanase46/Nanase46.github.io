I"<h1 id="redis-主从复制简介">Redis 主从复制简介</h1>

<p>Redis 支持简单且易用的主从复制（master-slave replication）功能， 
该功能可以让从服务器(slave server)成为主服务器(master server)的精确复制品。</p>

<p>以下是关于 Redis 复制功能的几个重要方面：</p>

<ul>
  <li>Redis 使用异步复制。 从 Redis 2.8 开始， 从服务器会以每秒一次的频率向主服务器报告复制流（replication stream）的处理进度。</li>
  <li>一个主服务器可以有多个从服务器。</li>
  <li>不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器， 多个从服务器之间可以构成一个图状结构。</li>
  <li>复制功能不会阻塞主服务器： 即使有一个或多个从服务器正在进行初次同步， 主服务器也可以继续处理命令请求。</li>
  <li>复制功能也不会阻塞从服务器： 只要在 redis.conf 文件中进行了相应的设置， 即使从服务器正在进行初次同步， 
服务器也可以使用旧版本的数据集来处理命令查询。不过， 在从服务器删除旧版本数据集并载入新版本数据集的那段时间内， 连接请求会被阻塞。
你还可以配置从服务器， 让它在与主服务器之间的连接断开时， 向客户端发送一个错误。</li>
  <li>复制功能可以单纯地用于数据冗余（data redundancy）， 也可以通过让多个从服务器处理只读命令请求来提升扩展性（scalability）： 
比如说， 繁重的 SORT 命令可以交给附属节点去运行。</li>
  <li>可以通过复制功能来让主服务器免于执行持久化操作： 只要关闭主服务器的持久化功能， 然后由从服务器去执行持久化操作即可。</li>
</ul>

<h1 id="关闭主服务器持久化时复制功能的数据安全">关闭主服务器持久化时，复制功能的数据安全</h1>

<p>当配置 Redis 复制功能时，强烈建议打开主服务器的持久化功能。 否则的话，由于延迟等问题，部署的服务应该要避免自动拉起。</p>

<p>为了帮助理解主服务器关闭持久化时自动拉起的危险性，参考一下以下会导致主从服务器数据全部丢失的例子：</p>

<ol>
  <li>
    <p>假设节点 A 为主服务器，并且关闭了持久化。 并且节点 B 和节点 C 从节点 A 复制数据</p>
  </li>
  <li>
    <p>节点 A 崩溃，然后由自动拉起服务重启了节点 A. 由于节点 A 的持久化被关闭了，所以重启之后没有任何数据</p>
  </li>
  <li>
    <p>节点 B 和节点 C 将从节点 A 复制数据，但是 A 的数据是空的， 于是就把自身保存的数据副本删除。</p>
  </li>
</ol>

<p>在关闭主服务器上的持久化，并同时开启自动拉起进程的情况下，即便使用 Sentinel 来实现 Redis 的高可用性，也是非常危险的。 <br />
因为主服务器可能拉起得非常快，以至于 Sentinel 在配置的心跳时间间隔内没有检测到主服务器已被重启，
然后还是会执行上面的数据丢失的流程。</p>

<p>无论何时，数据安全都是极其重要的，所以<strong>应该禁止主服务器关闭持久化的同时自动拉起</strong>。</p>

<h1 id="复制功能的运作原理">复制功能的运作原理</h1>

<p>无论是初次连接还是重新连接， 当建立一个从服务器时， 从服务器都将向主服务器发送一个 SYNC 命令。</p>

<p>接到 SYNC 命令的主服务器将开始执行 BGSAVE，并在保存操作执行期间，将所有新执行的写入命令都保存到一个缓冲区里面。</p>

<p>当 BGSAVE 执行完毕后， 主服务器将执行保存操作所得的 .rdb 文件发送给从服务器， 从服务器接收这个 .rdb 文件， 
并将文件中的数据载入到内存中。</p>

<p>之后主服务器会以 Redis 命令协议的格式，将写命令缓冲区中积累的所有内容都发送给从服务器。</p>

<p>你可以通过 telnet 命令来亲自验证这个同步过程： <br />
首先连上一个正在处理命令请求的 Redis 服务器， 然后向它发送 SYNC 命令，<br />
过一阵子， 你将看到 telnet 会话（session）接收到服务器发来的大段数据（.rdb 文件）， <br />
之后还会看到， 所有在服务器执行过的写命令， 都会重新发送到 telnet 会话来。</p>

<p>即使有多个从服务器同时向主服务器发送 SYNC ， 主服务器也只需执行一次 BGSAVE 命令， 就可以处理所有这些从服务器的同步请求。</p>

<p>从服务器可以在主从服务器之间的连接断开时进行自动重连， 在 Redis 2.8 版本之前， 
断线之后重连的从服务器总要执行一次完整重同步（full resynchronization）操作， <br />
但是从 Redis 2.8 版本开始， 从服务器可以根据主服务器的情况来选择执行完整重同步还是部分重同步（partial resynchronization）。</p>

<h1 id="配置">配置</h1>

<p>配置一个从服务器非常简单， 只要在配置文件中增加以下的这一行就可以了：</p>

<p>slaveof 192.168.1.1 6379</p>

<p>当然，你需要将代码中的 192.168.1.1 和 6379 替换成你的主服务器的 IP 和端口号。</p>

<p>另外一种方法是调用 SLAVEOF 命令， 输入主服务器的 IP 和端口， 然后同步就会开始：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
127.0.0.1:6379&gt; SLAVEOF 192.168.1.1 10086  
OK  

</code></pre></div></div>

<h1 id="只读从服务器">只读从服务器</h1>

<p>从 Redis 2.6 开始， 从服务器支持只读模式， 并且该模式为从服务器的默认模式。</p>

<p>只读模式由 redis.conf 文件中的 slave-read-only 选项控制， 也可以通过 CONFIG SET 命令来开启或关闭这个模式。</p>

<p>只读从服务器会拒绝执行任何写命令， 所以不会出现因为操作失误而将数据不小心写入到了从服务器的情况。</p>

<p>即使从服务器是只读的， DEBUG 和 CONFIG 等管理式命令仍然是可以使用的， 所以我们还是不应该将服务器暴露给互联网或者任何不可信网络。 <br />
不过， 使用 redis.conf 中的命令改名选项， 我们可以通过禁止执行某些命令来提升只读从服务器的安全性。</p>

<p>你可能会感到好奇， 既然从服务器上的写数据会被重同步数据覆盖， 也可能在从服务器重启时丢失， 那么为什么要让一个从服务器变得可写呢？</p>

<p>原因是， 一些不重要的临时数据， 仍然是可以保存在从服务器上面的。 
比如说， 客户端可以在从服务器上保存主服务器的可达性（reachability）信息， 从而实现故障转移（failover）策略。</p>

<h1 id="从服务器相关配置">从服务器相关配置</h1>

<p>如果主服务器通过 requirepass 选项设置了密码， 那么为了让从服务器的同步操作可以顺利进行， 我们也必须为从服务器进行相应的身份验证设置。</p>

<p>对于一个正在运行的服务器， 可以使用客户端输入以下命令：</p>

<blockquote>

  <p>config set masterauth <password></password></p>
</blockquote>

<p>要永久地设置这个密码， 那么可以将它加入到配置文件中：</p>

<blockquote>

  <p>masterauth <password></password></p>
</blockquote>

<p>另外还有几个选项， 它们和主服务器执行部分重同步时所使用的复制流缓冲区有关， 详细的信息可以参考 Redis 源码中附带的 redis.conf 示例文件。</p>

<h1 id="ref">Ref</h1>
<p><a href="http://redisdoc.com/topic/replication.html">复制（Replication）</a><br />
<a href="http://daisywei.blog.51cto.com/7837970/1828337">Redis 高可用主从复制</a><br />
<a href="http://www.cnblogs.com/binchen-china/p/5568007.html">Redis - 密码配置和主从复制</a></p>

:ET